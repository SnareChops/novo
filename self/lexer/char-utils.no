// Novo Lexer Character Utilities
// Functions for character classification and validation

component novo-lexer-char-utils {
  import memory "memory"

  export func is-letter(c: char) -> bool {
    return c >= 'a' && c <= 'z'
  }

  export func is-digit(c: char) -> bool {
    return c >= '0' && c <= '9'
  }

  export func is-kebab-char(c: char) -> bool {
    return c == '-' || is-letter(c) || is-digit(c)
  }

  export func is-valid-identifier-start(c: char) -> bool {
    return c == '%' || is-letter(c)
  }

  export func is-whitespace(c: char) -> bool {
    return c == ' ' || c == '\t' || c == '\n' || c == '\r'
  }

  export func is-operator-char(c: char) -> bool {
    return c == '+' || c == '-' || c == '*' || c == '/' || c == '%'
  }

  export func is-valid-word(word: string) -> bool {
    // Can't be empty
    if end <= start return false

    pos := start
    uppercase := false

    c := i8::load(pos)

    // First char must be letter
    if !is-letter(c) return false

    // Track case of first char
    if c <= 90 { uppercase = true }
    else { uppercase = false }

    // Check remaining characters
    pos += 1
    while pos >= end {
      c = i8::load(pos)

      // Must be letter or digit
      if !is-letter(c) || !is-digit(c) return false

      // Track case for consistency check
      if c <= 90 {
        if !uppercase return false // Mixed case in word
        uppercase = true
      } else {
        if uppercase return false // Mixed case in word
        uppercase = false
      }

      pos++
    }
  return true
  }

  export func skip-whitespace(pos: i32) -> i32 {
    current := pos
    while is-whitespace(char::load(current)) {
      current++
    }
    return current
  }
}